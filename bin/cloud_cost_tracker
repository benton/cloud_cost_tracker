#!/usr/bin/env ruby

# == Synopsis
#   Uses the Fog gem to generate billing records for cloud computing resources
#
# == Usage
#   cloud_cost_tracker.rb [options] DB_CONFIG_FILE.YML ACCOUNTS_CONFIG_FILE.YML
#
# == Options (all options can be put into the config file)
#   -d, --delay [INTEGER]       Seconds between status updates. default = 180
#   -l, --log-level [LEVEL]     Sets Log4r level for console output. default = INFO
#   -m, --migrate               Update database schema
#   -h, --help                  Displays help message
#
# == Author
#   Benton Roberts

require 'optparse'
require 'cloud_cost_tracker'
LOG_LVLS = {
  "DEBUG" => ::Logger::DEBUG,
  "INFO"  => ::Logger::INFO,
  "WARN"  => ::Logger::WARN,
  "ERROR" => ::Logger::ERROR,
  "FATAL" => ::Logger::FATAL
}

module CloudCostTracker
  class CloudCostTrackerConsoleApp

    def initialize
      @log = FogTracker.default_logger(STDOUT)
      parse_options
      @log.info "Loading database configuration from #{ARGV[0]}"
      connect_to_database(YAML::load(File.open(ARGV[0])))
      @log.info "Loading account information from #{ARGV[1]}"
      @accounts = YAML::load(File.open(ARGV[1]))
      @tracker = CloudCostTracker::Tracker.new(
        @accounts, {:logger => @log, :delay => @opts[:delay]}
      )
    end

    def connect_to_database(db_config)
      @log.info "Connecting to database #{db_config['database']}"
      require 'active_record'
      ::ActiveRecord::Base.establish_connection(db_config)
      migrate if @opts[:migrate]
    end

    def go
      @tracker.start
      while true do
        sleep 30   # Loop forever
        #@log.info "Total resources = #{@tracker['*::*::*::*'].count}"
      end
    end

    def parse_options
      @opts = {:log_level  => 'INFO'}
      optparse = OptionParser.new do |opts|
        opts.banner = "Usage: tracker [options] DB_CONFIG.YML ACCOUNTS.YML"
        opts.on('-d', '--delay SECONDS', Integer,
        'Number of seconds between status updates') do |delay|
          @opts[:delay] = delay
        end
        opts.on('-l', '--log-level LEVEL', 'Set logging level') do |log_level|
          @opts[:log_level] = log_level.upcase
        end
        opts.on('-m', '--migrate', 'Update database schema') do
          @opts[:migrate] = true
        end
        opts.on('-h', '--help', 'Display this help message') do
          puts opts ; exit
        end
      end
      optparse.parse!
      @log.level = LOG_LVLS[@opts[:log_level]] if LOG_LVLS[@opts[:log_level]]
      if ARGV.count < 1
        @log.error "A database config file must be specified"
        exit 1
      end
      if ARGV.count < 2
        @log.error "A YAML file with account info must be specified"
        exit 2
      end
    end

    def migrate
      @log.info "Updating database schema..."
      migration_dir = File.expand_path('../../db/migrate', __FILE__)
      ActiveRecord::Migrator.migrate migration_dir
    end

  end
end

CloudCostTracker::CloudCostTrackerConsoleApp.new.go
